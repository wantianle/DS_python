# coding=utf-8

# 122、买卖股票的最佳时机II
# 题目：给定⼀个数组，它的第 i 个元素是⼀⽀给定股票第 i 天的价格。设计⼀个算法来计算你所能获取的最⼤利润。你可以尽可能地完成更多的交易（多次买卖⼀⽀股票）。注意：你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。
# ⽰例 1:
# 输⼊: [7,1,5,3,6,4]
# 输出: 7
# 解释: 在第 2 天（股票价格 = 1）的时候买⼊，在第 3 天（股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4。随后，在第 4 天（股票价格 = 3）的时候买⼊，在第 5 天（股票价格 = 6）的时候卖出, 这笔交易所能获得利润 = 6-3 = 3 。
# ⽰例 2:
# 输⼊: [1,2,3,4,5]
# 输出: 4
# 解释: 在第 1 天（股票价格 = 1）的时候买⼊，在第 5 天 （股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4 。注意你不能在第 1 天和第 2 天接连购买股票，之后再将它们卖出。因为这样属于同时参与了多笔交易，你必须在再次购买前出售掉之前的股票。⽰例 3:
# 输⼊: [7,6,4,3,1]
# 输出: 0
# 解释: 在这种情况下, 没有交易完成, 所以最⼤利润为 0。

# 主要思路：局部最优到整体最优，只要求隔天正利润，叠加即可

import numpy as np

nums = np.random.randint(5, 40, size=10)
print(nums)
# nums = [1, 2, 3, 4, 5]
count = 0
for i, num in enumerate(nums):
    if i < len(nums) - 1 and nums[i + 1] > num:
        count += nums[i + 1] - num
print(count)
